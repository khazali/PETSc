#! /usr/bin/env tcsh
# 
# Compiles and tests PETSc in our nightly builds.
# Run as buildtest ARCH where ARCH is one of the default PETSc archs
# of a configure arch
#
# Example usage: ${PETSC_DIR}/bin/maint/buildtest solaris
#                ./bin/maint/buildtest solaris
#
set day=`date | cut -f1 -d" "`
set nPETSC_DIR=`pwd`
if ( ! -f ${nPETSC_DIR}/include/petscsys.h ) then
  set maintdir=`dirname $0`
  set nPETSC_DIR=`dirname $maintdir`
  if ( ( ${nPETSC_DIR} !~ /*) || (! -f ${nPETSC_DIR}/include/petscsys.h )) then
    if (${?PETSC_DIR}) then 
      set nPETSC_DIR=${PETSC_DIR}
      if ( ! -f ${nPETSC_DIR}/include/petscsys.h ) then
        echo "Unable to locate PETSc directory, run with full path or in PETSc directory"
        exit
      endif
    else
      echo "Unable to locate PETSc directory, run with full path or in PETSc directory"
      exit
    endif
  endif
endif

if (${#argv} > 0) then 
  set ARCH=${1}
else
  echo "ARCH not specified to buildtest"
  exit
endif
if (${#argv} > 1) then 
  set CONFIGURE_ARGS="${argv[2-]}"
else 
  set CONFIGURE_ARGS=""
endif

set MACH=`hostname`
cd $nPETSC_DIR
rm -f build.log
echo "Build on $MACH $ARCH $nPETSC_DIR `date` " > build.log

# Note: we are using detatched heads - so 'git fetch/pull' is not done here.
# Note use 'git clean' intead of manually deleting seleted old files.
echo "Cleaning throughly at $nPETSC_DIR" >>& build.log
(git reset --hard; git clean -q -f -d -x -e build.log; git gc -q) >>& build.log
# externalpackages can be a git repo - so one has to explicitly remove them
rm -rf ./${ARCH}
echo "Currently building git branch:" `git describe --contains --all HEAD` >>& build.log
git log --pretty=format:"commit: %H%nsubject: %s" -1 >>& build.log

set PETSC_DIR=$nPETSC_DIR
set PETSC_ARCH=${ARCH}
set CONFIGURE='yes'
set CONFIGURE_FILE=$PETSC_ARCH

# check for cygwin/windows build - and use TMP=PETSC_DIR/tmp for win32fe
if ( -f /usr/bin/cygcheck.exe ) then
  setenv TMP ${PETSC_DIR}/tmp
  mkdir -p $TMP
endif

# Run initialization script
if ( -f ./config/examples/${CONFIGURE_FILE}.csh ) then
  source ./config/examples/${CONFIGURE_FILE}.csh
endif

# Run Configure
./config/examples/${CONFIGURE_FILE}.py --with-no-output PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$PETSC_DIR ${CONFIGURE_ARGS} >>& build.log
set err=$?
echo '****************************************************' >>& build.log
if ( $err ) exit
#
# check if PETSC_ARCH has name builder - if so enable builder runs
#
echo $PETSC_ARCH | grep builder > /dev/null
if ( $? ) then
  set BUILDER="no"
else
  set BUILDER="yes"
endif
#
# check if PETSC_ARCH has name analyzer - if so enable build with clang static analyzer
#
echo $PETSC_ARCH | grep analyzer > /dev/null
if ( $? ) then
  set ANALYZER=""
  set ANALYZER_PCC=""
else
  set ANALYZER="scan-build -o analyzer-results-dir"
  #set ANALYZER_PCC="PCC=/nfs2/petsc/soft/linux-Ubuntu_12.04-x86_64/clang-3.8.0/libexec/ccc-analyzer"
  set ANALYZER_PCC=P`scan-build env |grep ^CC=`
endif
#
# check if PETSC_ARCH has name valgrind - if so enable valgrind runs
#
echo $PETSC_ARCH | grep valgrind > /dev/null
if ( $? ) then
  set VALGRIND='DUMMYARGUMENT=foobar'
else
  set VALGRIND=`echo MPIEXEC="${PETSC_DIR}/bin/petscmpiexec -valgrind"`
  setenv PETSCVALGRIND_OPTIONS "--suppressions=${PETSC_DIR}/bin/maint/petsc-val.supp"
endif
#
#check gcov
set GCOV=`grep PETSC_USE_GCOV $nPETSC_DIR/$PETSC_ARCH/include/petscconf.h`
if ( "${GCOV}" != "" ) then
  set BUILDTARGET="all-legacy"
else
  set BUILDTARGET="all"
endif
#
# check for prefix install
set  PREFIXDIR=`grep PREFIXDIR $nPETSC_DIR/$PETSC_ARCH/lib/petsc/conf/petscvariables | cut -d ' ' -f 3`
if ( "${PREFIXDIR}" != "" ) then
  set INSTALLTARGET="install"
else
  set INSTALLTARGET=""
endif
#
# do build/install
${ANALYZER} make PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$PETSC_DIR  ${BUILDTARGET} ${INSTALLTARGET} >>& build.log
set err=$?
echo '****************************************************' >>& build.log
echo "Finished Build on $MACH $PETSC_ARCH `date`" >>& build.log
if ( $err && ( ! -f ${PETSC_ARCH}/lib/petsc/conf/petsc4py.errorflg )) exit
#
# change PETSC_DIR/PETSC_ARCH for prefix install
if ( "${PREFIXDIR}" != "" ) then
  set PETSC_DIR="${PREFIXDIR}"
  set PETSC_ARCH=""
endif
#
# do test
make PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$PETSC_DIR test >>& build.log
set err=$?
echo '****************************************************' >>& build.log
echo "Finished Test on $MACH $PETSC_ARCH `date`" >>& build.log
if ( $err ) exit
#
# check analyzer
if ( "${ANALYZER}" != "" ) then
  mv analyzer-results-dir/* analyzer-src-results
endif
#
# Run examples
#
grep PETSC_WITH_BATCH ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables > /dev/null
if ( $? ) then
  set TESTMODE='testexamples'
else
  set TESTMODE='buildexamples'
endif
#
rm -f examples.log
echo "Build on $MACH $PETSC_ARCH TESTMODE=$TESTMODE ${VALGRIND} ${ANALYZER_PCC} `date` " > examples.log
git log --pretty=format:"commit: %H%nsubject: %s" -1 >>& examples.log
if ( "${BUILDER}" == "yes" ) then
  env PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$PETSC_DIR ./config/builder2.py regression >>& examples.log
else
  $ANALYZER make PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$PETSC_DIR alltests V=0 TESTMODE=$TESTMODE "${VALGRIND}" ${ANALYZER_PCC} |& grep -v 'up to date' >>& examples.log
endif
echo '******************************************************' >>& examples.log

if ( "${ANALYZER}" != "" ) then
  mv analyzer-results-dir/* analyzer-ex-results
endif

if ( "${GCOV}" != "" ) then
  rm -f gcov.log
  make PETSC_ARCH=$PETSC_ARCH PETSC_DIR=$PETSC_DIR gcov  >& gcov.log
endif

echo "Finished Build on $MACH $PETSC_ARCH `date`" >>& examples.log
echo 'X******************************************************X' >>& examples.log


